/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * Ergo Explorer API v1
 * OpenAPI spec version: 1.0
 */
import type {
  TransactionInfo,
  ItemsTransactionInfo,
  GetApiV1TransactionsByinputsscripttemplatehashP1Params,
  ListTransactionInfo,
  GetApiV1TransactionsByglobalindexStreamParams,
  ListOutputInfo,
  GetApiV1BoxesUnspentBylastepochsStreamParams,
  GetApiV1BoxesUnspentByglobalindexStreamParams,
  GetApiV1BoxesUnspentStreamParams,
  GetApiV1BoxesByergotreetemplatehashP1StreamParams,
  GetApiV1BoxesUnspentByergotreetemplatehashP1StreamParams,
  ItemsOutputInfo,
  GetApiV1BoxesUnspentBytokenidP1Params,
  GetApiV1BoxesBytokenidP1Params,
  OutputInfo,
  GetApiV1BoxesByergotreeP1Params,
  GetApiV1BoxesByergotreetemplatehashP1Params,
  GetApiV1BoxesUnspentByergotreeP1Params,
  GetApiV1BoxesUnspentByergotreetemplatehashP1Params,
  GetApiV1BoxesByaddressP1Params,
  GetApiV1BoxesUnspentByaddressP1Params,
  GetApiV1BoxesByglobalindexStreamParams,
  BoxAssetsQuery,
  PostApiV1BoxesUnspentSearchUnionParams,
  BoxQuery,
  PostApiV1BoxesUnspentSearchParams,
  PostApiV1BoxesSearchParams,
  ItemsTokenInfo,
  GetApiV1TokensParams,
  GetApiV1TokensSearchParams,
  TokenInfo,
  GetApiV1AssetsParams,
  ItemsAssetInfo,
  GetApiV1AssetsSearchBytokenidParams,
  EpochInfo,
  GetApiV1AddressesP1TransactionsParams,
  Balance,
  GetApiV1AddressesP1BalanceConfirmedParams,
  TotalBalance,
  ItemsBlockInfo,
  GetApiV1BlocksParams,
  BlockSummary,
  ItemsBlockHeader,
  GetApiV1BlocksHeadersParams,
  ListBlockInfo,
  GetApiV1BlocksByglobalindexStreamParams,
  ListBlockSummaryV1,
  GetApiV1BlocksStreamSummaryParams,
  TxIdResponse,
  PostApiV1MempoolTransactionsSubmitBody,
  ItemsUTransactionInfo,
  GetApiV1MempoolTransactionsByaddressP1Params,
  NetworkState,
  NetworkStats,
} from '../types';
import { axios } from '../../axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getApiV1TransactionsP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionInfo>(
    { url: `/api/v1/transactions/${p1}`, method: 'get' },
    options
  );
};
export const getApiV1TransactionsByinputsscripttemplatehashP1 = (
  p1: string,
  params?: GetApiV1TransactionsByinputsscripttemplatehashP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsTransactionInfo>(
    {
      url: `/api/v1/transactions/byInputsScriptTemplateHash/${p1}`,
      method: 'get',
      params,
    },
    options
  );
};
/**
 * Get a stream of transactions ordered by global index
 */
export const getApiV1TransactionsByglobalindexStream = (
  params: GetApiV1TransactionsByglobalindexStreamParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ListTransactionInfo>(
    { url: `/api/v1/transactions/byGlobalIndex/stream`, method: 'get', params },
    options
  );
};
export const getApiV1BoxesUnspentBylastepochsStream = (
  params: GetApiV1BoxesUnspentBylastepochsStreamParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ListOutputInfo>(
    { url: `/api/v1/boxes/unspent/byLastEpochs/stream`, method: 'get', params },
    options
  );
};
/**
 * Get a stream of unspent outputs ordered by global index
 */
export const getApiV1BoxesUnspentByglobalindexStream = (
  params: GetApiV1BoxesUnspentByglobalindexStreamParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ListOutputInfo>(
    {
      url: `/api/v1/boxes/unspent/byGlobalIndex/stream`,
      method: 'get',
      params,
    },
    options
  );
};
export const getApiV1BoxesUnspentStream = (
  params: GetApiV1BoxesUnspentStreamParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ListOutputInfo>(
    { url: `/api/v1/boxes/unspent/stream`, method: 'get', params },
    options
  );
};
/**
 * Get a stream of unspent outputs by a hash of the given ErgoTreeTemplate
 */
export const getApiV1BoxesByergotreetemplatehashP1Stream = (
  p1: string,
  params: GetApiV1BoxesByergotreetemplatehashP1StreamParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ListOutputInfo>(
    {
      url: `/api/v1/boxes/byErgoTreeTemplateHash/${p1}/stream`,
      method: 'get',
      params,
    },
    options
  );
};
export const getApiV1BoxesUnspentByergotreetemplatehashP1Stream = (
  p1: string,
  params: GetApiV1BoxesUnspentByergotreetemplatehashP1StreamParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ListOutputInfo>(
    {
      url: `/api/v1/boxes/unspent/byErgoTreeTemplateHash/${p1}/stream`,
      method: 'get',
      params,
    },
    options
  );
};
export const getApiV1BoxesUnspentBytokenidP1 = (
  p1: string,
  params?: GetApiV1BoxesUnspentBytokenidP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    { url: `/api/v1/boxes/unspent/byTokenId/${p1}`, method: 'get', params },
    options
  );
};
export const getApiV1BoxesBytokenidP1 = (
  p1: string,
  params?: GetApiV1BoxesBytokenidP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    { url: `/api/v1/boxes/byTokenId/${p1}`, method: 'get', params },
    options
  );
};
export const getApiV1BoxesP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<OutputInfo>(
    { url: `/api/v1/boxes/${p1}`, method: 'get' },
    options
  );
};
export const getApiV1BoxesByergotreeP1 = (
  p1: string,
  params?: GetApiV1BoxesByergotreeP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    { url: `/api/v1/boxes/byErgoTree/${p1}`, method: 'get', params },
    options
  );
};
export const getApiV1BoxesByergotreetemplatehashP1 = (
  p1: string,
  params?: GetApiV1BoxesByergotreetemplatehashP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    {
      url: `/api/v1/boxes/byErgoTreeTemplateHash/${p1}`,
      method: 'get',
      params,
    },
    options
  );
};
export const getApiV1BoxesUnspentByergotreeP1 = (
  p1: string,
  params?: GetApiV1BoxesUnspentByergotreeP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    { url: `/api/v1/boxes/unspent/byErgoTree/${p1}`, method: 'get', params },
    options
  );
};
export const getApiV1BoxesUnspentByergotreetemplatehashP1 = (
  p1: string,
  params?: GetApiV1BoxesUnspentByergotreetemplatehashP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    {
      url: `/api/v1/boxes/unspent/byErgoTreeTemplateHash/${p1}`,
      method: 'get',
      params,
    },
    options
  );
};
export const getApiV1BoxesByaddressP1 = (
  p1: string,
  params?: GetApiV1BoxesByaddressP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    { url: `/api/v1/boxes/byAddress/${p1}`, method: 'get', params },
    options
  );
};
export const getApiV1BoxesUnspentByaddressP1 = (
  p1: string,
  params?: GetApiV1BoxesUnspentByaddressP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    { url: `/api/v1/boxes/unspent/byAddress/${p1}`, method: 'get', params },
    options
  );
};
/**
 * Get a stream of outputs ordered by global index
 */
export const getApiV1BoxesByglobalindexStream = (
  params: GetApiV1BoxesByglobalindexStreamParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ListOutputInfo>(
    { url: `/api/v1/boxes/byGlobalIndex/stream`, method: 'get', params },
    options
  );
};
/**
 * Search among UTXO set by ergoTreeTemplateHash and tokens. The resulted UTXOs will contain at lest one of the given tokens.
 */
export const postApiV1BoxesUnspentSearchUnion = (
  boxAssetsQuery: BoxAssetsQuery,
  params?: PostApiV1BoxesUnspentSearchUnionParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    {
      url: `/api/v1/boxes/unspent/search/union`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: boxAssetsQuery,
      params,
    },
    options
  );
};
/**
 * Detailed search among UTXO set
 */
export const postApiV1BoxesUnspentSearch = (
  boxQuery: BoxQuery,
  params?: PostApiV1BoxesUnspentSearchParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    {
      url: `/api/v1/boxes/unspent/search`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: boxQuery,
      params,
    },
    options
  );
};
/**
 * Detailed search among all boxes in the chain
 */
export const postApiV1BoxesSearch = (
  boxQuery: BoxQuery,
  params?: PostApiV1BoxesSearchParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    {
      url: `/api/v1/boxes/search`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: boxQuery,
      params,
    },
    options
  );
};
export const getApiV1Tokens = (
  params?: GetApiV1TokensParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsTokenInfo>(
    { url: `/api/v1/tokens`, method: 'get', params },
    options
  );
};
/**
 * Search by ID or Symbol of an asset. Note that symbols aren't unique.
 */
export const getApiV1TokensSearch = (
  params: GetApiV1TokensSearchParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsTokenInfo>(
    { url: `/api/v1/tokens/search`, method: 'get', params },
    options
  );
};
/**
 * Get all assets with a given Symbol. Note that symbols aren't unique.
 */
export const getApiV1TokensBysymbolP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TokenInfo[]>(
    { url: `/api/v1/tokens/bySymbol/${p1}`, method: 'get' },
    options
  );
};
export const getApiV1TokensP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TokenInfo>(
    { url: `/api/v1/tokens/${p1}`, method: 'get' },
    options
  );
};
/**
 * Use '/tokens' instead
 * @deprecated
 */
export const getApiV1Assets = (
  params?: GetApiV1AssetsParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsTokenInfo>(
    { url: `/api/v1/assets`, method: 'get', params },
    options
  );
};
export const getApiV1AssetsSearchBytokenid = (
  params: GetApiV1AssetsSearchBytokenidParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsAssetInfo>(
    { url: `/api/v1/assets/search/byTokenId`, method: 'get', params },
    options
  );
};
export const getApiV1EpochsParams = (
  options?: SecondParameter<typeof axios>
) => {
  return axios<EpochInfo>(
    { url: `/api/v1/epochs/params`, method: 'get' },
    options
  );
};
export const getApiV1AddressesP1Transactions = (
  p1: string,
  params?: GetApiV1AddressesP1TransactionsParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsTransactionInfo>(
    { url: `/api/v1/addresses/${p1}/transactions`, method: 'get', params },
    options
  );
};
export const getApiV1AddressesP1BalanceConfirmed = (
  p1: string,
  params?: GetApiV1AddressesP1BalanceConfirmedParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<Balance>(
    { url: `/api/v1/addresses/${p1}/balance/confirmed`, method: 'get', params },
    options
  );
};
export const getApiV1AddressesP1BalanceTotal = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TotalBalance>(
    { url: `/api/v1/addresses/${p1}/balance/total`, method: 'get' },
    options
  );
};
export const getApiV1Blocks = (
  params?: GetApiV1BlocksParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsBlockInfo>(
    { url: `/api/v1/blocks`, method: 'get', params },
    options
  );
};
export const getApiV1BlocksP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<BlockSummary>(
    { url: `/api/v1/blocks/${p1}`, method: 'get' },
    options
  );
};
export const getApiV1BlocksHeaders = (
  params?: GetApiV1BlocksHeadersParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsBlockHeader>(
    { url: `/api/v1/blocks/headers`, method: 'get', params },
    options
  );
};
/**
 * Get a stream of blocks ordered by global index (height)
 */
export const getApiV1BlocksByglobalindexStream = (
  params: GetApiV1BlocksByglobalindexStreamParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ListBlockInfo>(
    { url: `/api/v1/blocks/byGlobalIndex/stream`, method: 'get', params },
    options
  );
};
/**
 * Get a stream of block summaries ordered by global index (height)
 */
export const getApiV1BlocksStreamSummary = (
  params?: GetApiV1BlocksStreamSummaryParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ListBlockSummaryV1>(
    { url: `/api/v1/blocks/stream/summary`, method: 'get', params },
    options
  );
};
export const postApiV1MempoolTransactionsSubmit = (
  postApiV1MempoolTransactionsSubmitBody: PostApiV1MempoolTransactionsSubmitBody,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TxIdResponse>(
    {
      url: `/api/v1/mempool/transactions/submit`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postApiV1MempoolTransactionsSubmitBody,
    },
    options
  );
};
export const getApiV1MempoolTransactionsByaddressP1 = (
  p1: string,
  params?: GetApiV1MempoolTransactionsByaddressP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsUTransactionInfo>(
    {
      url: `/api/v1/mempool/transactions/byAddress/${p1}`,
      method: 'get',
      params,
    },
    options
  );
};
/**
 * Get a stream of unspent outputs
 */
export const getApiV1MempoolBoxesUnspent = (
  options?: SecondParameter<typeof axios>
) => {
  return axios<ListOutputInfo>(
    { url: `/api/v1/mempool/boxes/unspent`, method: 'get' },
    options
  );
};
/**
 * @deprecated
 */
export const getApiV1Info = (options?: SecondParameter<typeof axios>) => {
  return axios<NetworkState>({ url: `/api/v1/info`, method: 'get' }, options);
};
export const getApiV1Networkstate = (
  options?: SecondParameter<typeof axios>
) => {
  return axios<NetworkState>(
    { url: `/api/v1/networkState`, method: 'get' },
    options
  );
};
export const getApiV1Networkstats = (
  options?: SecondParameter<typeof axios>
) => {
  return axios<NetworkStats>(
    { url: `/api/v1/networkStats`, method: 'get' },
    options
  );
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;
