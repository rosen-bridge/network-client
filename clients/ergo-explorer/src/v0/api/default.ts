/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * Ergo Explorer API v0
 * OpenAPI spec version: 1.0
 */
import type {
  AddressInfo,
  GetApiV0AddressesP1Params,
  ItemsTransactionInfo,
  GetApiV0AddressesP1TransactionsParams,
  GetApiV0AddressesAssetholdersP1Params,
  ItemsBalanceInfo,
  GetApiV0AddressesBalancesParams,
  ItemsOutputInfo,
  GetApiV0AssetsIssuingboxesParams,
  OutputInfo,
  ItemsBlockInfo,
  GetApiV0BlocksParams,
  BlockSummary,
  DexSellOrderInfo,
  GetApiV0DexTokensP1UnspentsellordersParams,
  DexBuyOrderInfo,
  GetApiV0DexTokensP1UnspentbuyordersParams,
  TransactionSummary,
  UTransactionSummary,
  ItemsUTransactionInfo,
  GetApiV0TransactionsUnconfirmedByaddressP1Params,
  GetApiV0TransactionsUnconfirmedParams,
  TransactionInfo,
  GetApiV0TransactionsSinceP1Params,
  TxIdResponse,
  PostApiV0TransactionsSendBody,
  BlockChainInfo,
  StatsSummary,
} from '../types';
import { axios } from '../../axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getApiV0AddressesP1 = (
  p1: string,
  params?: GetApiV0AddressesP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<AddressInfo>(
    { url: `/api/v0/addresses/${p1}`, method: 'get', params },
    options
  );
};
export const getApiV0AddressesP1Transactions = (
  p1: string,
  params?: GetApiV0AddressesP1TransactionsParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsTransactionInfo>(
    { url: `/api/v0/addresses/${p1}/transactions`, method: 'get', params },
    options
  );
};
export const getApiV0AddressesAssetholdersP1 = (
  p1: string,
  params?: GetApiV0AddressesAssetholdersP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<string[]>(
    { url: `/api/v0/addresses/assetHolders/${p1}`, method: 'get', params },
    options
  );
};
export const getApiV0AddressesBalances = (
  params?: GetApiV0AddressesBalancesParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsBalanceInfo>(
    { url: `/api/v0/addresses/balances`, method: 'get', params },
    options
  );
};
export const getApiV0AssetsIssuingboxes = (
  params?: GetApiV0AssetsIssuingboxesParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsOutputInfo>(
    { url: `/api/v0/assets/issuingBoxes`, method: 'get', params },
    options
  );
};
export const getApiV0AssetsP1Issuingbox = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<OutputInfo[]>(
    { url: `/api/v0/assets/${p1}/issuingBox`, method: 'get' },
    options
  );
};
export const getApiV0Blocks = (
  params?: GetApiV0BlocksParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsBlockInfo>(
    { url: `/api/v0/blocks`, method: 'get', params },
    options
  );
};
export const getApiV0BlocksP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<BlockSummary>(
    { url: `/api/v0/blocks/${p1}`, method: 'get' },
    options
  );
};
export const getApiV0BlocksAtP1 = (
  p1: bigint,
  options?: SecondParameter<typeof axios>
) => {
  return axios<string[]>(
    { url: `/api/v0/blocks/at/${p1}`, method: 'get' },
    options
  );
};
/**
 * DEX sell orders for a given token id
 */
export const getApiV0DexTokensP1Unspentsellorders = (
  p1: string,
  params?: GetApiV0DexTokensP1UnspentsellordersParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<DexSellOrderInfo[]>(
    {
      url: `/api/v0/dex/tokens/${p1}/unspentSellOrders`,
      method: 'get',
      params,
    },
    options
  );
};
/**
 * DEX buy orders for a given token id
 */
export const getApiV0DexTokensP1Unspentbuyorders = (
  p1: string,
  params?: GetApiV0DexTokensP1UnspentbuyordersParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<DexBuyOrderInfo[]>(
    { url: `/api/v0/dex/tokens/${p1}/unspentBuyOrders`, method: 'get', params },
    options
  );
};
export const getApiV0TransactionsP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionSummary>(
    { url: `/api/v0/transactions/${p1}`, method: 'get' },
    options
  );
};
export const getApiV0TransactionsUnconfirmedP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<UTransactionSummary>(
    { url: `/api/v0/transactions/unconfirmed/${p1}`, method: 'get' },
    options
  );
};
export const getApiV0TransactionsUnconfirmedByaddressP1 = (
  p1: string,
  params?: GetApiV0TransactionsUnconfirmedByaddressP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsUTransactionInfo>(
    {
      url: `/api/v0/transactions/unconfirmed/byAddress/${p1}`,
      method: 'get',
      params,
    },
    options
  );
};
export const getApiV0TransactionsUnconfirmed = (
  params?: GetApiV0TransactionsUnconfirmedParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ItemsUTransactionInfo>(
    { url: `/api/v0/transactions/unconfirmed`, method: 'get', params },
    options
  );
};
export const getApiV0TransactionsSinceP1 = (
  p1: bigint,
  params?: GetApiV0TransactionsSinceP1Params,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionInfo[]>(
    { url: `/api/v0/transactions/since/${p1}`, method: 'get', params },
    options
  );
};
export const postApiV0TransactionsSend = (
  postApiV0TransactionsSendBody: PostApiV0TransactionsSendBody,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TxIdResponse>(
    {
      url: `/api/v0/transactions/send`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: postApiV0TransactionsSendBody,
    },
    options
  );
};
export const getApiV0TransactionsBoxesP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<OutputInfo>(
    { url: `/api/v0/transactions/boxes/${p1}`, method: 'get' },
    options
  );
};
export const getApiV0TransactionsBoxesByergotreeP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<OutputInfo[]>(
    { url: `/api/v0/transactions/boxes/byErgoTree/${p1}`, method: 'get' },
    options
  );
};
export const getApiV0TransactionsBoxesByergotreeUnspentP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<OutputInfo[]>(
    {
      url: `/api/v0/transactions/boxes/byErgoTree/unspent/${p1}`,
      method: 'get',
    },
    options
  );
};
export const getApiV0TransactionsBoxesByaddressP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<OutputInfo[]>(
    { url: `/api/v0/transactions/boxes/byAddress/${p1}`, method: 'get' },
    options
  );
};
export const getApiV0TransactionsBoxesByaddressUnspentP1 = (
  p1: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<OutputInfo[]>(
    {
      url: `/api/v0/transactions/boxes/byAddress/unspent/${p1}`,
      method: 'get',
    },
    options
  );
};
export const getApiV0Info = (options?: SecondParameter<typeof axios>) => {
  return axios<BlockChainInfo>({ url: `/api/v0/info`, method: 'get' }, options);
};
export const getApiV0InfoSupply = (options?: SecondParameter<typeof axios>) => {
  return axios<string>({ url: `/api/v0/info/supply`, method: 'get' }, options);
};
export const getApiV0Stats = (options?: SecondParameter<typeof axios>) => {
  return axios<StatsSummary>({ url: `/api/v0/stats`, method: 'get' }, options);
};
export const getApiV0DocsOpenapi = (
  options?: SecondParameter<typeof axios>
) => {
  return axios<string>({ url: `/api/v0/docs/openapi`, method: 'get' }, options);
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;
