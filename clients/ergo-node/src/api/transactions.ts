/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 * OpenAPI spec version: 5.0.10
 */
import type {
  TransactionId,
  ErgoTransaction,
  Transactions,
  GetUnconfirmedTransactionsParams,
  GetUnconfirmedTransactionsByErgoTreeParams,
  FeeHistogram,
  GetFeeHistogramParams,
  GetRecommendedFeeParams,
  GetExpectedWaitTimeParams,
} from '../types';
import { axios } from '../axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary Submit an Ergo transaction to unconfirmed pool to send it over the network
 */
export const sendTransaction = (
  ergoTransaction: ErgoTransaction,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionId>(
    {
      url: `/transactions`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: ergoTransaction,
    },
    options
  );
};
/**
 * @summary Submit an Ergo transaction given as hex-encoded transaction bytes to unconfirmed pool to send it over the network
 */
export const sendTransactionAsBytes = (
  sendTransactionAsBytesBody: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionId>(
    {
      url: `/transactions/bytes`,
      method: 'post',
      headers: { 'Content-Type': 'text/plain' },
      data: sendTransactionAsBytesBody,
    },
    options
  );
};
/**
 * @summary Checks an Ergo transaction without sending it over the network. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks.
 */
export const checkTransaction = (
  ergoTransaction: ErgoTransaction,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionId>(
    {
      url: `/transactions/check`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: ergoTransaction,
    },
    options
  );
};
/**
 * @summary Checks an Ergo transaction without sending it over the network given in form of hex-encoded transaction bytes. Checks that transaction is valid and its inputs are in the UTXO set. Returns transaction identifier if the transaction is passing the checks.
 */
export const checkTransactionAsBytes = (
  checkTransactionAsBytesBody: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionId>(
    {
      url: `/transactions/checkBytes`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: checkTransactionAsBytesBody,
    },
    options
  );
};
/**
 * @summary Get current pool of the unconfirmed transactions pool
 */
export const getUnconfirmedTransactions = (
  params?: GetUnconfirmedTransactionsParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<Transactions>(
    { url: `/transactions/unconfirmed`, method: 'get', params },
    options
  );
};
/**
 * @summary Check if given transaction is unconfirmed in pool
 */
export const checkUnconfirmedTransaction = (
  txId: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<void>(
    { url: `/transactions/unconfirmed/${txId}`, method: 'head' },
    options
  );
};
/**
 * @summary Get unconfirmed transaction from pool
 */
export const getUnconfirmedTransactionById = (
  txId: string,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ErgoTransaction>(
    { url: `/transactions/unconfirmed/byTransactionId/${txId}`, method: 'get' },
    options
  );
};
/**
 * @summary Finds unconfirmed transactions by ErgoTree hex of one of its output or input boxes (if present in UtxoState)
 */
export const getUnconfirmedTransactionsByErgoTree = (
  getUnconfirmedTransactionsByErgoTreeBody: string,
  params?: GetUnconfirmedTransactionsByErgoTreeParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<Transactions>(
    {
      url: `/transactions/unconfirmed/byErgoTree`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: getUnconfirmedTransactionsByErgoTreeBody,
      params,
    },
    options
  );
};
/**
 * @summary Get histogram (waittime, (n_trans, sum(fee)) for transactions in mempool. It contains "bins"+1 bins, where i-th elements corresponds to transaction with wait time [i*maxtime/bins, (i+1)*maxtime/bins), and last bin corresponds to the transactions with wait time >= maxtime.
 */
export const getFeeHistogram = (
  params?: GetFeeHistogramParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<FeeHistogram>(
    { url: `/transactions/poolHistogram`, method: 'get', params },
    options
  );
};
/**
 * @summary Get recommended fee (in nanoErgs) for a transaction with specified size (in bytes) to be proceeded in specified time (in minutes)
 */
export const getRecommendedFee = (
  params: GetRecommendedFeeParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<number>(
    { url: `/transactions/getFee`, method: 'get', params },
    options
  );
};
/**
 * @summary Get expected wait time for the transaction with specified fee and size
 */
export const getExpectedWaitTime = (
  params: GetExpectedWaitTimeParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<number>(
    { url: `/transactions/waitTime`, method: 'get', params },
    options
  );
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type SendTransactionResult = NonNullable<
  Awaited<ReturnType<typeof sendTransaction>>
>;
export type SendTransactionAsBytesResult = NonNullable<
  Awaited<ReturnType<typeof sendTransactionAsBytes>>
>;
export type CheckTransactionResult = NonNullable<
  Awaited<ReturnType<typeof checkTransaction>>
>;
export type CheckTransactionAsBytesResult = NonNullable<
  Awaited<ReturnType<typeof checkTransactionAsBytes>>
>;
export type GetUnconfirmedTransactionsResult = NonNullable<
  Awaited<ReturnType<typeof getUnconfirmedTransactions>>
>;
export type CheckUnconfirmedTransactionResult = NonNullable<
  Awaited<ReturnType<typeof checkUnconfirmedTransaction>>
>;
export type GetUnconfirmedTransactionByIdResult = NonNullable<
  Awaited<ReturnType<typeof getUnconfirmedTransactionById>>
>;
export type GetUnconfirmedTransactionsByErgoTreeResult = NonNullable<
  Awaited<ReturnType<typeof getUnconfirmedTransactionsByErgoTree>>
>;
export type GetFeeHistogramResult = NonNullable<
  Awaited<ReturnType<typeof getFeeHistogram>>
>;
export type GetRecommendedFeeResult = NonNullable<
  Awaited<ReturnType<typeof getRecommendedFee>>
>;
export type GetExpectedWaitTimeResult = NonNullable<
  Awaited<ReturnType<typeof getExpectedWaitTime>>
>;
