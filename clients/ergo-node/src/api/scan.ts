/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 * OpenAPI spec version: 5.0.7
 */
import type {
  ScanId,
  ScanRequest,
  Scan,
  WalletBox,
  ListUnspentScansParams,
  ListSpentScansParams,
  ScanIdBoxId,
  TransactionId,
  ScanIdsBox,
} from '../types';
import { axios } from '../axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary Register a scan
 */
export const registerScan = (
  scanRequest: ScanRequest,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ScanId>(
    {
      url: `/scan/register`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: scanRequest,
    },
    options
  );
};
/**
 * @summary Stop tracking and deregister scan
 */
export const deregisterScan = (
  scanId: ScanId,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ScanId>(
    {
      url: `/scan/deregister`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: scanId,
    },
    options
  );
};
/**
 * @summary List all the registered scans
 */
export const listAllScans = (options?: SecondParameter<typeof axios>) => {
  return axios<Scan[]>({ url: `/scan/listAll`, method: 'get' }, options);
};
/**
 * @summary List boxes which are not spent.
 */
export const listUnspentScans = (
  scanId: number,
  params?: ListUnspentScansParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<WalletBox[]>(
    { url: `/scan/unspentBoxes/${scanId}`, method: 'get', params },
    options
  );
};
/**
 * @summary List boxes which are spent.
 */
export const listSpentScans = (
  scanId: number,
  params?: ListSpentScansParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<WalletBox[]>(
    { url: `/scan/spentBoxes/${scanId}`, method: 'get', params },
    options
  );
};
/**
 * @summary Stop scan-related box tracking
 */
export const scanStopTracking = (
  scanIdBoxId: ScanIdBoxId,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ScanIdBoxId>(
    {
      url: `/scan/stopTracking`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: scanIdBoxId,
    },
    options
  );
};
/**
 * @summary Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.
 */
export const addBox = (
  scanIdsBox: ScanIdsBox,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionId>(
    {
      url: `/scan/addBox`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: scanIdsBox,
    },
    options
  );
};
export type RegisterScanResult = NonNullable<
  Awaited<ReturnType<typeof registerScan>>
>;
export type DeregisterScanResult = NonNullable<
  Awaited<ReturnType<typeof deregisterScan>>
>;
export type ListAllScansResult = NonNullable<
  Awaited<ReturnType<typeof listAllScans>>
>;
export type ListUnspentScansResult = NonNullable<
  Awaited<ReturnType<typeof listUnspentScans>>
>;
export type ListSpentScansResult = NonNullable<
  Awaited<ReturnType<typeof listSpentScans>>
>;
export type ScanStopTrackingResult = NonNullable<
  Awaited<ReturnType<typeof scanStopTracking>>
>;
export type AddBoxResult = NonNullable<Awaited<ReturnType<typeof addBox>>>;
