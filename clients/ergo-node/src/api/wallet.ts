/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 * OpenAPI spec version: 5.0.7
 */
import type {
  InitWalletResult,
  InitWallet,
  RestoreWallet,
  PassphraseMatch,
  CheckWallet,
  UnlockWallet,
  WalletRescanBody,
  WalletStatus,
  ErgoAddress,
  DeriveKeyResult,
  DeriveKey,
  DeriveNextKeyResult,
  BalancesSnapshot,
  WalletTransaction,
  WalletTransactionsParams,
  WalletGetTransactionParams,
  WalletTransactionsByScanIdParams,
  WalletBox,
  WalletBoxesParams,
  BoxesRequestHolder,
  WalletUnspentBoxesParams,
  ErgoTransaction,
  RequestsHolder,
  UnsignedErgoTransaction,
  TransactionSigningRequest,
  TransactionId,
  PaymentRequest,
  TransactionHintsBag,
  GenerateCommitmentsRequest,
  HintExtractionRequest,
  ScanIdsBox,
} from '../types';
import { axios } from '../axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

/**
 * @summary Initialize new wallet with randomly generated seed
 */
export const walletInit = (
  initWallet: InitWallet,
  options?: SecondParameter<typeof axios>
) => {
  return axios<InitWalletResult>(
    {
      url: `/wallet/init`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: initWallet,
    },
    options
  );
};
/**
 * @summary Create new wallet from existing mnemonic seed
 */
export const walletRestore = (
  restoreWallet: RestoreWallet,
  options?: SecondParameter<typeof axios>
) => {
  return axios<void>(
    {
      url: `/wallet/restore`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: restoreWallet,
    },
    options
  );
};
/**
 * @summary Check whether mnemonic phrase is corresponding to the wallet seed
 */
export const checkSeed = (
  checkWallet: CheckWallet,
  options?: SecondParameter<typeof axios>
) => {
  return axios<PassphraseMatch>(
    {
      url: `/wallet/check`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: checkWallet,
    },
    options
  );
};
/**
 * @summary Unlock wallet
 */
export const walletUnlock = (
  unlockWallet: UnlockWallet,
  options?: SecondParameter<typeof axios>
) => {
  return axios<void>(
    {
      url: `/wallet/unlock`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: unlockWallet,
    },
    options
  );
};
/**
 * @summary Lock wallet
 */
export const walletLock = (options?: SecondParameter<typeof axios>) => {
  return axios<void>({ url: `/wallet/lock`, method: 'get' }, options);
};
/**
 * @summary Rescan wallet (all the available full blocks). When fromHeight is set wallet would not see any boxes below it.
 */
export const walletRescan = (
  walletRescanBody: WalletRescanBody,
  options?: SecondParameter<typeof axios>
) => {
  return axios<void>(
    {
      url: `/wallet/rescan`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: walletRescanBody,
    },
    options
  );
};
/**
 * @summary Get wallet status
 */
export const getWalletStatus = (options?: SecondParameter<typeof axios>) => {
  return axios<WalletStatus>({ url: `/wallet/status`, method: 'get' }, options);
};
/**
 * @summary Update address to be used to send change to
 */
export const walletUpdateChangeAddress = (
  ergoAddress: ErgoAddress,
  options?: SecondParameter<typeof axios>
) => {
  return axios<void>(
    {
      url: `/wallet/updateChangeAddress`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: ergoAddress,
    },
    options
  );
};
/**
 * @summary Derive new key according to a provided path
 */
export const walletDeriveKey = (
  deriveKey: DeriveKey,
  options?: SecondParameter<typeof axios>
) => {
  return axios<DeriveKeyResult>(
    {
      url: `/wallet/deriveKey`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: deriveKey,
    },
    options
  );
};
/**
 * @summary Derive next key
 */
export const walletDeriveNextKey = (
  options?: SecondParameter<typeof axios>
) => {
  return axios<DeriveNextKeyResult>(
    { url: `/wallet/deriveNextKey`, method: 'get' },
    options
  );
};
/**
 * @summary Get total amount of confirmed Ergo tokens and assets
 */
export const walletBalances = (options?: SecondParameter<typeof axios>) => {
  return axios<BalancesSnapshot>(
    { url: `/wallet/balances`, method: 'get' },
    options
  );
};
/**
 * @summary Get a list of all wallet-related transactions
 */
export const walletTransactions = (
  params?: WalletTransactionsParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<WalletTransaction[]>(
    { url: `/wallet/transactions`, method: 'get', params },
    options
  );
};
/**
 * @summary Get wallet-related transaction by id
 */
export const walletGetTransaction = (
  params: WalletGetTransactionParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<WalletTransaction[]>(
    { url: `/wallet/transactionById`, method: 'get', params },
    options
  );
};
/**
 * @summary Get scan-related transactions by scan id
 */
export const walletTransactionsByScanId = (
  scanId: bigint,
  params?: WalletTransactionsByScanIdParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<WalletTransaction[]>(
    { url: `/wallet/transactionsByScanId/${scanId}`, method: 'get', params },
    options
  );
};
/**
 * @summary Get a list of all wallet-related boxes, both spent and unspent. Set minConfirmations to -1 to get mempool boxes included.
 */
export const walletBoxes = (
  params?: WalletBoxesParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<WalletBox[]>(
    { url: `/wallet/boxes`, method: 'get', params },
    options
  );
};
/**
 * @summary Get a list of collected boxes.
 */
export const walletBoxesCollect = (
  boxesRequestHolder: BoxesRequestHolder,
  options?: SecondParameter<typeof axios>
) => {
  return axios<WalletBox[]>(
    {
      url: `/wallet/boxes/collect`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: boxesRequestHolder,
    },
    options
  );
};
/**
 * @summary Get a list of unspent boxes. Set minConfirmations to -1 to have mempool boxes considered.
 */
export const walletUnspentBoxes = (
  params?: WalletUnspentBoxesParams,
  options?: SecondParameter<typeof axios>
) => {
  return axios<WalletBox[]>(
    { url: `/wallet/boxes/unspent`, method: 'get', params },
    options
  );
};
/**
 * @summary Get summary amount of confirmed plus unconfirmed Ergo tokens and assets
 */
export const walletBalancesUnconfirmed = (
  options?: SecondParameter<typeof axios>
) => {
  return axios<BalancesSnapshot>(
    { url: `/wallet/balances/withUnconfirmed`, method: 'get' },
    options
  );
};
/**
 * @summary Get wallet addresses
 */
export const walletAddresses = (options?: SecondParameter<typeof axios>) => {
  return axios<ErgoAddress[]>(
    { url: `/wallet/addresses`, method: 'get' },
    options
  );
};
/**
 * @summary Generate arbitrary transaction from array of requests.
 */
export const walletTransactionGenerate = (
  requestsHolder: RequestsHolder,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ErgoTransaction>(
    {
      url: `/wallet/transaction/generate`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestsHolder,
    },
    options
  );
};
/**
 * @summary Generate unsigned transaction from array of requests.
 */
export const walletUnsignedTransactionGenerate = (
  requestsHolder: RequestsHolder,
  options?: SecondParameter<typeof axios>
) => {
  return axios<UnsignedErgoTransaction>(
    {
      url: `/wallet/transaction/generateUnsigned`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestsHolder,
    },
    options
  );
};
/**
 * @summary Sign arbitrary unsigned transaction with wallet secrets and also secrets provided.
 */
export const walletTransactionSign = (
  transactionSigningRequest: TransactionSigningRequest,
  options?: SecondParameter<typeof axios>
) => {
  return axios<ErgoTransaction>(
    {
      url: `/wallet/transaction/sign`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: transactionSigningRequest,
    },
    options
  );
};
/**
 * @summary Generate and send arbitrary transaction
 */
export const walletTransactionGenerateAndSend = (
  requestsHolder: RequestsHolder,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionId>(
    {
      url: `/wallet/transaction/send`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestsHolder,
    },
    options
  );
};
/**
 * @summary Generate and send payment transaction (default fee of 0.001 Erg is used)
 */
export const walletPaymentTransactionGenerateAndSend = (
  paymentRequest: PaymentRequest[],
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionId>(
    {
      url: `/wallet/payment/send`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: paymentRequest,
    },
    options
  );
};
/**
 * @summary Generate signature commitments for inputs of an unsigned transaction
 */
export const generateCommitments = (
  generateCommitmentsRequest: GenerateCommitmentsRequest,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionHintsBag>(
    {
      url: `/wallet/generateCommitments`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: generateCommitmentsRequest,
    },
    options
  );
};
/**
 * @summary Extract hints from a transaction
 */
export const extractHints = (
  hintExtractionRequest: HintExtractionRequest,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionHintsBag>(
    {
      url: `/wallet/extractHints`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: hintExtractionRequest,
    },
    options
  );
};
/**
 * @summary Adds a box to scans, writes box to database if it is not there. You can use scan number 10 to add a box to the wallet.
 */
export const addBox = (
  scanIdsBox: ScanIdsBox,
  options?: SecondParameter<typeof axios>
) => {
  return axios<TransactionId>(
    {
      url: `/scan/addBox`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: scanIdsBox,
    },
    options
  );
};
export type WalletInitResult = NonNullable<
  Awaited<ReturnType<typeof walletInit>>
>;
export type WalletRestoreResult = NonNullable<
  Awaited<ReturnType<typeof walletRestore>>
>;
export type CheckSeedResult = NonNullable<
  Awaited<ReturnType<typeof checkSeed>>
>;
export type WalletUnlockResult = NonNullable<
  Awaited<ReturnType<typeof walletUnlock>>
>;
export type WalletLockResult = NonNullable<
  Awaited<ReturnType<typeof walletLock>>
>;
export type WalletRescanResult = NonNullable<
  Awaited<ReturnType<typeof walletRescan>>
>;
export type GetWalletStatusResult = NonNullable<
  Awaited<ReturnType<typeof getWalletStatus>>
>;
export type WalletUpdateChangeAddressResult = NonNullable<
  Awaited<ReturnType<typeof walletUpdateChangeAddress>>
>;
export type WalletDeriveKeyResult = NonNullable<
  Awaited<ReturnType<typeof walletDeriveKey>>
>;
export type WalletDeriveNextKeyResult = NonNullable<
  Awaited<ReturnType<typeof walletDeriveNextKey>>
>;
export type WalletBalancesResult = NonNullable<
  Awaited<ReturnType<typeof walletBalances>>
>;
export type WalletTransactionsResult = NonNullable<
  Awaited<ReturnType<typeof walletTransactions>>
>;
export type WalletGetTransactionResult = NonNullable<
  Awaited<ReturnType<typeof walletGetTransaction>>
>;
export type WalletTransactionsByScanIdResult = NonNullable<
  Awaited<ReturnType<typeof walletTransactionsByScanId>>
>;
export type WalletBoxesResult = NonNullable<
  Awaited<ReturnType<typeof walletBoxes>>
>;
export type WalletBoxesCollectResult = NonNullable<
  Awaited<ReturnType<typeof walletBoxesCollect>>
>;
export type WalletUnspentBoxesResult = NonNullable<
  Awaited<ReturnType<typeof walletUnspentBoxes>>
>;
export type WalletBalancesUnconfirmedResult = NonNullable<
  Awaited<ReturnType<typeof walletBalancesUnconfirmed>>
>;
export type WalletAddressesResult = NonNullable<
  Awaited<ReturnType<typeof walletAddresses>>
>;
export type WalletTransactionGenerateResult = NonNullable<
  Awaited<ReturnType<typeof walletTransactionGenerate>>
>;
export type WalletUnsignedTransactionGenerateResult = NonNullable<
  Awaited<ReturnType<typeof walletUnsignedTransactionGenerate>>
>;
export type WalletTransactionSignResult = NonNullable<
  Awaited<ReturnType<typeof walletTransactionSign>>
>;
export type WalletTransactionGenerateAndSendResult = NonNullable<
  Awaited<ReturnType<typeof walletTransactionGenerateAndSend>>
>;
export type WalletPaymentTransactionGenerateAndSendResult = NonNullable<
  Awaited<ReturnType<typeof walletPaymentTransactionGenerateAndSend>>
>;
export type GenerateCommitmentsResult = NonNullable<
  Awaited<ReturnType<typeof generateCommitments>>
>;
export type ExtractHintsResult = NonNullable<
  Awaited<ReturnType<typeof extractHints>>
>;
export type AddBoxResult = NonNullable<Awaited<ReturnType<typeof addBox>>>;
