/**
 * Generated by orval v6.15.0 🍺
 * Do not edit manually.
 * Ergo Node API
 * API docs for Ergo Node. Models are shared between all Ergo products
 * OpenAPI spec version: 5.0.10
 */
import type { ModifierId } from './modifierId';
import { bigIntsModifierId } from './modifierId';
import type { Timestamp } from './timestamp';
import { bigIntsTimestamp } from './timestamp';
import type { Version } from './version';
import { bigIntsVersion } from './version';
import type { Digest32 } from './digest32';
import { bigIntsDigest32 } from './digest32';
import type { AvlTreeData } from './avlTreeData';
import { bigIntsAvlTreeData } from './avlTreeData';
import type { PowSolutions } from './powSolutions';
import { bigIntsPowSolutions } from './powSolutions';
import type { Votes } from './votes';

import { bigIntsVotes } from './votes';

/**
 * Block header format used for sigma ErgoLikeContext
 */
export interface SigmaHeader {
  id?: ModifierId;
  timestamp: Timestamp;
  version: Version;
  adProofsRoot: Digest32;
  adProofsId?: ModifierId;
  stateRoot: AvlTreeData;
  transactionsRoot: Digest32;
  transactionsId?: ModifierId;
  nBits: bigint;
  extensionHash: Digest32;
  extensionRoot?: Digest32;
  extensionId?: ModifierId;
  height: number;
  size?: number;
  parentId: ModifierId;
  powSolutions?: PowSolutions;
  votes: Votes;
  minerPk?: string;
  powOnetimePk?: string;
  powNonce?: Digest32;
  /** sigma.BigInt */
  powDistance?: number;
}

export const bigIntsSigmaHeader = [
  ...bigIntsModifierId.map((item) => `id.${item}`),
  ...bigIntsTimestamp.map((item) => `timestamp.${item}`),
  ...bigIntsVersion.map((item) => `version.${item}`),
  ...bigIntsDigest32.map((item) => `adProofsRoot.${item}`),
  ...bigIntsModifierId.map((item) => `adProofsId.${item}`),
  ...bigIntsAvlTreeData.map((item) => `stateRoot.${item}`),
  ...bigIntsDigest32.map((item) => `transactionsRoot.${item}`),
  ...bigIntsModifierId.map((item) => `transactionsId.${item}`),
  'nBits',
  ...bigIntsDigest32.map((item) => `extensionHash.${item}`),
  ...bigIntsDigest32.map((item) => `extensionRoot.${item}`),
  ...bigIntsModifierId.map((item) => `extensionId.${item}`),
  ...bigIntsModifierId.map((item) => `parentId.${item}`),
  ...bigIntsPowSolutions.map((item) => `powSolutions.${item}`),
  ...bigIntsVotes.map((item) => `votes.${item}`),
  ...bigIntsDigest32.map((item) => `powNonce.${item}`),
];
